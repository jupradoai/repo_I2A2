"""
Agente Coordenador - Orquestra todo o sistema multiagente.
"""

import asyncio
import time
import logging
from typing import Dict, Any, List, Optional
from pathlib import Path

from rich.console import Console
from rich.table import Table

from .base import BaseAgente
from .consolidador import AgenteConsolidador
from .limpeza import AgenteLimpeza
from .calculador import AgenteCalculador
from .validador import AgenteValidador
from .gerador import AgenteGerador
from config.settings import Settings
from models.resultado import ResultadoProcessamento
from models.dados_entrada import DadosEntrada

# ‚úÖ ALTERNATIVA: N√£o herdar de BaseAgente
class AgenteCoordenador:
    """Agente Coordenador - Orquestra todo o sistema multiagente."""
    
    def __init__(self, settings: Settings):
        self.settings = settings
        self.agentes = {}
        self.resultado = None
        self.estatisticas_agentes = {}
        self.console = Console()
        self.duracao_total = 0
        self.total_erros = 0
        # ‚úÖ ADICIONAR: Atributos faltantes
        self.logger = logging.getLogger(__name__)
        self._inicializar_agentes()
        
    # ‚úÖ ADICIONAR: M√©todo abstrato obrigat√≥rio
    async def _executar_agente(self, dados_entrada: Any) -> Any:
        """Implementa√ß√£o do m√©todo abstrato - n√£o usado no coordenador."""
        raise NotImplementedError("Coordenador n√£o implementa _executar_agente diretamente")
        
    def _inicializar_agentes(self):
        """Inicializa todos os agentes do sistema."""
        self.agentes = {
            'consolidador': AgenteConsolidador(self.settings),
            'limpeza': AgenteLimpeza(self.settings),
            'calculador': AgenteCalculador(self.settings),
            'validador': AgenteValidador(self.settings),
            'gerador': AgenteGerador(self.settings)
        }
        
    async def executar_fluxo_completo(self) -> bool:
        """Executa o fluxo completo do sistema multiagente."""
        try:
            print("üöÄ Iniciando fluxo completo do sistema multiagente...")
            inicio_total = time.time()
            
            # FASE 1: Consolida√ß√£o
            dados_consolidados = await self._executar_fase_consolidacao()
            if not dados_consolidados:
                print("‚ùå Falha na consolida√ß√£o")
                return False
                
            # FASE 2: Limpeza
            dados_limpos = await self._executar_fase_limpeza(dados_consolidados)
            if not dados_limpos:
                print("‚ùå Falha na limpeza")
                return False
                
            # FASE 3: C√°lculos
            dados_calculados = await self._executar_fase_calculos(dados_limpos)
            if not dados_calculados:
                print("‚ùå Falha nos c√°lculos")
                return False
                
            # FASE 4: Valida√ß√£o
            dados_validados = await self._executar_fase_validacao(dados_calculados)
            if not dados_validados:
                print("‚ùå Falha na valida√ß√£o")
                return False
                
            # FASE 5: Gera√ß√£o
            # Define resultado para o resumo final
            self.resultado = dados_validados
            arquivo_saida = await self._executar_fase_geracao(dados_validados)
            if not arquivo_saida:
                print("‚ùå Falha na gera√ß√£o")
                return False
                
            # Resumo final
            self.duracao_total = time.time() - inicio_total
            self._exibir_resumo_final()
            
            print("‚úÖ Processamento conclu√≠do com sucesso!")
            print(f"üìä Resultados salvos em: {self.settings.OUTPUT_DIR}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no fluxo completo: {e}")
            import traceback
            traceback.print_exc()
            return False
            
    async def _executar_fase_consolidacao(self):
        """Executa a fase de consolida√ß√£o."""
        print("\nüìä FASE 1: Consolida√ß√£o de Dados")
        inicio = time.time()
        
        agente = AgenteConsolidador(self.settings)
        dados_consolidados = await agente.executar(None)
        
        duracao = time.time() - inicio
        print(f"‚úÖ Consolidador Conclu√≠do em {duracao:.2f}s")
        
        # ‚úÖ ADICIONAR: Registrar estat√≠sticas do consolidador
        self._registrar_estatisticas_agente("Consolidador", {
            'sucesso': True,
            'duracao': duracao,
            'registros_processados': len(dados_consolidados.colaboradores_ativos),
            'total_erros': 0,
            'total_warnings': 0
        })
        
        return dados_consolidados
        
    async def _executar_fase_limpeza(self, dados_consolidados: DadosEntrada):
        """Executa a fase de limpeza."""
        print("\nüßπ FASE 2: Limpeza e Exclus√£o de Dados")
        inicio = time.time()
        
        agente = AgenteLimpeza(self.settings)
        dados_limpos = await agente.executar(dados_consolidados)
        
        duracao = time.time() - inicio
        print(f"‚úÖ Limpeza Conclu√≠da em {duracao:.2f}s")
        
        # ‚úÖ ADICIONAR: Registrar estat√≠sticas da limpeza
        self._registrar_estatisticas_agente("Limpeza", {
            'sucesso': True,
            'duracao': duracao,
            'registros_processados': len(dados_limpos.colaboradores_ativos),
            'total_erros': 0,
            'total_warnings': 0
        })
        
        return dados_limpos
        
    async def _executar_fase_calculos(self, dados_limpos: DadosEntrada):
        """Executa a fase de c√°lculos."""
        print("\nüßÆ FASE 3: C√°lculos de Benef√≠cios")
        inicio = time.time()
        
        agente = AgenteCalculador(self.settings)
        dados_calculados = await agente.executar(dados_limpos)
        
        duracao = time.time() - inicio
        print(f"‚úÖ Calculador Conclu√≠do em {duracao:.2f}s")
        
        # ‚úÖ ADICIONAR: Preencher campos de estat√≠sticas financeiras
        dados_calculados.total_beneficios = sum(c.get('valor_total_beneficio', 0) for c in dados_calculados.colaboradores_ativos)
        dados_calculados.total_custo_empresa = sum(c.get('custo_empresa', 0) for c in dados_calculados.colaboradores_ativos)
        dados_calculados.total_desconto_profissionais = sum(c.get('desconto_profissional', 0) for c in dados_calculados.colaboradores_ativos)
        
        # ‚úÖ ADICIONAR: Registrar estat√≠sticas do calculador
        self._registrar_estatisticas_agente("Calculador", {
            'sucesso': True,
            'duracao': duracao,
            'registros_processados': len(dados_calculados.colaboradores_ativos),
            'total_erros': 0,
            'total_warnings': 0
        })
        
        return dados_calculados
        
    async def _executar_fase_validacao(self, dados_limpos: DadosEntrada):
        """Executa a fase de valida√ß√£o."""
        try:
            print("\nüîç FASE 4: Valida√ß√£o de Dados")
            inicio = time.time()
            
            agente = AgenteValidador(self.settings)
            resultado = await agente.executar(dados_limpos)
            
            # PREENCHER campos de estat√≠sticas
            dados_limpos.total_colaboradores_processados = len(dados_limpos.colaboradores_ativos)
            dados_limpos.colaboradores_validos = len([c for c in dados_limpos.colaboradores_ativos if c.get('elegivel', True)])
            dados_limpos.total_colaboradores_excluidos = len(dados_limpos.obter_matriculas_excluidas())
            
            if dados_limpos.total_colaboradores_processados > 0:
                dados_limpos.percentual_cobertura = (dados_limpos.colaboradores_validos / dados_limpos.total_colaboradores_processados) * 100
            else:
                dados_limpos.percentual_cobertura = 0.0
            
            # Registrar estat√≠sticas do validador
            self._registrar_estatisticas_agente("Validador", {
                'sucesso': resultado.get('sucesso', False),
                'duracao': time.time() - inicio,
                'registros_processados': resultado.get('registros_processados', 0),
                'total_erros': resultado.get('total_erros', 0),
                'total_warnings': resultado.get('total_warnings', 0)
            })
            
            duracao = time.time() - inicio
            print(f"‚úÖ Validador Conclu√≠do em {duracao:.2f}s")
            
            if not resultado.get('sucesso', False):
                print(f"‚ùå Erro na valida√ß√£o: {resultado.get('erro', 'Erro desconhecido')}")
                return None
            
            return dados_limpos
        except Exception as e:
            self.logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
            return None
        
    async def _executar_fase_geracao(self, dados_calculados: DadosEntrada):
        """Executa a fase de gera√ß√£o."""
        print("\nüì§ FASE 5: Gera√ß√£o de Arquivo de Sa√≠da")
        inicio = time.time()
        
        agente = AgenteGerador(self.settings)
        arquivo_saida = await agente.executar(dados_calculados)
        
        duracao = time.time() - inicio
        print(f"‚úÖ Gerador Conclu√≠do em {duracao:.2f}s")
        
        # ‚úÖ ADICIONAR: Registrar estat√≠sticas do gerador
        self._registrar_estatisticas_agente("Gerador", {
            'sucesso': True,
            'duracao': duracao,
            'registros_processados': len(dados_calculados.colaboradores_ativos),
            'total_erros': 0,
            'total_warnings': 0
        })
        
        return arquivo_saida
        
    def _exibir_resumo_final(self):
        """Exibe resumo final do processamento."""
        # Usar cores v√°lidas do Rich
        self.console.print("\nüìä RESUMO FINAL DO PROCESSAMENTO", style="bold blue")
        
        # ‚úÖ CORRIGIR: Usar dados reais em vez de valores zerados
        total_colaboradores = len(self.resultado.colaboradores_ativos) if self.resultado and hasattr(self.resultado, 'colaboradores_ativos') else 0
        colaboradores_validos = len([c for c in self.resultado.colaboradores_ativos if c.get('elegivel', True)]) if self.resultado and hasattr(self.resultado, 'colaboradores_ativos') else 0
        colaboradores_excluidos = len(self.resultado.obter_matriculas_excluidas()) if self.resultado else 0
        
        # Criar tabela com cores v√°lidas
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("M√©trica", style="cyan", no_wrap=True)
        table.add_column("Valor", style="bold green")
        
        # Adicionar dados REAIS
        table.add_row("Status", "‚úÖ Sucesso", style="bold green")
        table.add_row("Dura√ß√£o", f"{self.duracao_total:.2f}s", style="yellow")
        table.add_row("Total Colaboradores", str(total_colaboradores), style="blue")
        table.add_row("Colaboradores V√°lidos", str(colaboradores_validos), style="green")
        table.add_row("Colaboradores Exclu√≠dos", str(colaboradores_excluidos), style="red")
        table.add_row("Erros Encontrados", str(self.total_erros), style="red")
        
        self.console.print(table)
        
        # Exibir estat√≠sticas dos agentes
        self._exibir_estatisticas_agentes()
        
    def _exibir_estatisticas_agentes(self):
        """Exibe estat√≠sticas de execu√ß√£o dos agentes."""
        if not self.estatisticas_agentes:
            print("‚ö†Ô∏è Nenhuma estat√≠stica de agente dispon√≠vel")
            return
            
        table = Table(title="üìä Estat√≠sticas dos Agentes", show_header=True, header_style="bold magenta")
        
        # Adicionar colunas
        table.add_column("Agente", style="cyan", no_wrap=True)
        table.add_column("Status", style="bold")
        table.add_column("Dura√ß√£o", style="green")
        table.add_column("Registros", style="blue")
        table.add_column("Erros", style="red")
        table.add_column("Warnings", style="yellow")
        
        # Adicionar linhas com cores v√°lidas
        for nome, stats in self.estatisticas_agentes.items():
            status = "‚úÖ" if stats.get('sucesso', False) else "‚ùå"
            duracao = f"{stats.get('duracao', 0):.2f}s"
            registros = stats.get('registros_processados', 0)
            erros = stats.get('total_erros', 0)
            warnings = stats.get('total_warnings', 0)
            
            # Usar cores v√°lidas do Rich
            status_style = "bold green" if stats.get('sucesso', False) else "bold red"
            
            table.add_row(
                nome,
                status,
                duracao,
                str(registros),
                str(erros),
                str(warnings),
                style=status_style
            )
        
        self.console.print(table)
        
    def _registrar_estatisticas_agente(self, nome_agente: str, estatisticas: dict):
        """Registra estat√≠sticas de um agente."""
        self.estatisticas_agentes[nome_agente] = estatisticas
        print(f"üìä Estat√≠sticas do {nome_agente} registradas: {estatisticas}")
        
    def reiniciar_agentes(self):
        """Reinicia todos os agentes."""
        for agente in self.agentes.values():
            agente.limpar_estado()
        self.logger.info("üîÑ Todos os agentes foram reiniciados") 